continue
message
continue
message
continue
message
continue
ports.join("\; ") + '.'
ports.join("; ") + '.'
ports.join(". ") + '.'
ports.join(")( ") + '.'
ports.join(", ") + '.'
ports.join(". ") + '.'
ports.join(" ") + '.'
ports.join("; ") + '.'
ports.join('; ') + '.'
ports.join('. ') + '.'
ports.join('. ')
ports.join('.')
ports.join
text = ports.inject { |base, x| base + ' ' + x + '.' }
text = ports.inject { |base, x| base + ' ' + x.name + '.' }
continue
ports
continue
a
a = ports.inject { |base, x| base.to_s + ' ' + x.name + '.' }
ports.inject { |base, x| base.to_s + ' ' + x.name + '.' }
ports.inject { |base, x| base.name + ' ' + x.name + '.' }
ports.inject { |base, x| base + ' ' + x.name + '.' }
ports.count
ports
continue
data['Partition']
continue
JSON.parse(record.description)
record.description
continue
CGI::escapeHTML('<br>')
raw "<br>"
h("<br>")
h "<br>"
continue
@response[:ports_parameters]
@response
continue
p.state
continue
-1 >= p.before_warning
-1 >= p.before_warning.seconds
0 >= p.before_warning.seconds
7 >= p.before_warning.seconds
Time.now - data.created_at >= p.before_warning.seconds
p.before_warning.seconds
p.before_warning
Time.now - data.created_at >= p.before_warning
Time.now - data.created_at >= p.before_warning.seconds
Time.now - data.created_at
Time.now.utc - data.created_at
DateTime.now.utc - data.created_at
DateTime.now.utc
data.created_at
DateTime.now
DateTime.now - data.created_at
continue
command
continue
['1','2','3','4'].to_json
['1','2','3','4'].join('"')
['1','2','3','4'].to_s
[1,2,3,4].to_s
'{"Command":"SetPartitionsState","State":' + new_data.to_s + '}'
'{"Command":"SetPartitionsState","State":' + new_data + '}'
continue
new_data[partition_number]
continue
port_number[%r{\Apartition_(.*)\z}, 1].to_i - 1
continue
e
e.user
continue
@ports_ids = Port.where(location_id: @locations)
@ports_ids = Port.where(connection_id: @locations)
continue
@ports_ids = Port.where(connection_id: @locations)
continue
@ports_ids = Port.where(connection_id: @locations)
@locations
@ports_ids = Port.where(connection_id: @locations)
@ports_ids
@excepted_port
@locations
Port.where(connection_id: @locations)
@ports_ids
continue
Location.where(access: @access_value)
continue
Location.where(access: @access_value)
continue
Location.where(access: current_user.role)
continue
Location.where(access: current_user.role)
continue
@location.ports.where(access: 9).order(:order_index).map { |p| p.id }
@location.ports.where(access: 9).order(:order_index)
@location.ports.where(access: 'engineer').order(:order_index)
@location.ports.where(access: 'security').order(:order_index)
@location.ports.where(access: 'engineer').order(:order_index)
@location.ports.where(access: 9).order(:order_index)
@location.ports.where(access: 9).try(:order, :order_index)
@location.ports.where(access: 9)
@location.ports.where(access: "lalala")
@ports = @location.ports.where(access: "lalala")
@ports
continue
a[0].access
a[0].role
a[0]
a.count
@ports.count
a.count
continue
@ports.count
@ports
continue
@ports.count
continue
a
@ports.count
@ports
a
continue
@ports.count
continue
@ports.count
@ports
continue
current_user.role
continue
created_at
continue
created_at
continue
created_at
time_out
continue
output
continue
output
continue
output
continue
output
continue
output
continue
created_at + Time.now.utc_offset
continue
state
continue
state
continue
state
continue
state
continue
state
continue
state
output
continue
Port.find_by(id: 2)
@ports
exit
Port.find_by(id: 2)
Port.find_by(id: 1)
@ports
b = l.ports.order(:lalala).each {|l| l}
l.ports.order(:lalala).each {|l| l}
[].order(:lalala)
l.ports.order(:lalala).each {|lala| lala}
l.ports.order(:lalala).each
l.ports.order(:lalala)
l.ports
l.ports.try(:pluck, :id, :port_type)
data
continue
@locations_parameters
continue
params[:selected_buttons]
params[:ports_parameters]
continueparams[:ports_parameters]
continue
@data
continue
@selected_buttons_ids
continue
data["int_345"]
data
continue
p.port_number
continue
" ".empty?
"".empty?
params[:user][:password_confirmation].empty?
params[:user][:password_confirmation]
!!params[:user][:password_confirmation]
continue
params[:user][:password]
params['password']
params
params[:password]
!!params[:password]
continue
!!params[:password]
params
params[:password_confirmation]
params[:password]
params[:password] || params[:password_confirmation]
continue
params[:password] || params[:password_confirmation]
!!params[:password]
!params[:password]
!!params[:password]
params[:password].true?
params[:password]
params
continue
exit
state
data[state]
continue
state
continue
state
p.port_number
continue
data[1]
continue
created_at + 9.minutes < DateTime.now
created_at + 8.minutes < DateTime.now
created_at + 7.minutes < DateTime.now
created_at + 10.minutes < DateTime.now
created_at + 50.minutes < DateTime.now
created_at + 5.minutes < DateTime.now
created_at + 1.hour < DateTime.now
created_at + time_out.seconds < DateTime.now
DateTime.now
time_out.seconds
time_out
created_at
continue
Connection.find_by(id: port_parameters['connection_id'])
port_parameters['connection_id']
connection = Connection.find_by(id: port_parameters['connection_id'])
connection = Connection.find_by(id: port_parameters['connection_id']
