continue
user_index_locations_path
exit
current_user.administrator?
current_user.role
current_user
Port.first.access
Port.first
port.first
record.description
record
exit
record.description
record
exit
port
record
data
exit
Port.first
data['Number']
exit
data.created_at
range >= port.before_alert
range = Time.now - data.created_at
range >= port.before_alert
exot
get_color(data, port)
exit
range >= port.before_alert
range >= p.before_alert
range >= port.before_warning
port
range >= port.before_warning
port.before_warning != 0 && range >= port.before_warning
p.before_warning != 0 && range >= p.before_warning
range = Time.now - data.created_at
continue
get_color(data, port)
get_color(data, port
color
exit
next
continue
p.port_type | continue
p.port_type && continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
continue
p.port_type
exit
p
p.port_type
p
p.port_type
p
p.port_type
p
p.port_type
p
p.port_type
p
exit
@port.port_type
@port..port_type
@port
exit
Time.now
Time.new
Time.now
Time.new
created_at + time_out.seconds < Time.new
created_at + time_out.seconds < Time.now
created_at + time_out.seconds < Date.new
created_at + time_out.seconds < Date.now
created_at + time_out.seconds < Time.now
created_at + time_out.seconds < DateTime.now
DateTime.now
Time.new
Date.new
Date.now
DateTime.now
exit
finish
help
ls
exit-programm
exit
exit-programm
continue
Record.where(connection_id: connection_id)
Record.where(connection_id: connection_id).try(:last)
data
continue
data
p.port_type
continue
exit
output << temperature_sensor(p, data[state], data[voltage], color)
p.port_type
exit
temperature_sensor(p, data[state], data[voltage], color)
output
data
exit
state
data
data[state]
port.enabled?
port
exit
a = 5 < 3 ? 7 : 9
a
a = 5 > 3 ? 7 : 9
exit
data
data[state]
p
exit
port_params
exit
@port
@port.extra_port_number
continue
ports_with_ranges
continue
port
continue
ports_with_ranges
p.id
 port
 port[2]
continue
@ports_with_ranges
continue
@ports_with_ranges
continue
@ports.pluck(:id,:port_type)
@ports
continue
@ports.pluck(:id,:port_type)
@ports
continue
User.roles
User.roles[0]
p[1]
p[0]
continue
p[0]
continue
p[0]
continue
message
continue
message
continue
message
continue
ports.join("\; ") + '.'
ports.join("; ") + '.'
ports.join(". ") + '.'
ports.join(")( ") + '.'
ports.join(", ") + '.'
ports.join(". ") + '.'
ports.join(" ") + '.'
ports.join("; ") + '.'
ports.join('; ') + '.'
ports.join('. ') + '.'
ports.join('. ')
ports.join('.')
ports.join
text = ports.inject { |base, x| base + ' ' + x + '.' }
text = ports.inject { |base, x| base + ' ' + x.name + '.' }
continue
ports
continue
a
a = ports.inject { |base, x| base.to_s + ' ' + x.name + '.' }
ports.inject { |base, x| base.to_s + ' ' + x.name + '.' }
ports.inject { |base, x| base.name + ' ' + x.name + '.' }
ports.inject { |base, x| base + ' ' + x.name + '.' }
ports.count
ports
continue
data['Partition']
continue
JSON.parse(record.description)
record.description
continue
CGI::escapeHTML('<br>')
raw "<br>"
h("<br>")
h "<br>"
continue
@response[:ports_parameters]
@response
continue
p.state
continue
-1 >= p.before_warning
-1 >= p.before_warning.seconds
0 >= p.before_warning.seconds
7 >= p.before_warning.seconds
Time.now - data.created_at >= p.before_warning.seconds
p.before_warning.seconds
p.before_warning
Time.now - data.created_at >= p.before_warning
Time.now - data.created_at >= p.before_warning.seconds
Time.now - data.created_at
Time.now.utc - data.created_at
DateTime.now.utc - data.created_at
DateTime.now.utc
data.created_at
DateTime.now
DateTime.now - data.created_at
continue
command
continue
['1','2','3','4'].to_json
['1','2','3','4'].join('"')
['1','2','3','4'].to_s
[1,2,3,4].to_s
'{"Command":"SetPartitionsState","State":' + new_data.to_s + '}'
'{"Command":"SetPartitionsState","State":' + new_data + '}'
continue
new_data[partition_number]
continue
port_number[%r{\Apartition_(.*)\z}, 1].to_i - 1
continue
e
e.user
continue
@ports_ids = Port.where(location_id: @locations)
@ports_ids = Port.where(connection_id: @locations)
continue
@ports_ids = Port.where(connection_id: @locations)
continue
